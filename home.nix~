{
  config,
  pkgs,
  lib,
  ...
}:

{
  imports = [ ./modules/home-manager/emacs.nix ];
  home.username = "abacaxinera";
  home.homeDirectory = "/home/abacaxinera";

  programs = {
    fish = {
      enable = true;
      # shellAbbrs = {
      #   "nos" = "nh os switch";
      # };
      functions = {
        fish_greeting = "${pkgs.fortune}/bin/fortune | ${pkgs.cowsay}/bin/cowsay";
      };
    };

    starship = {
      enable = true;
      enableTransience = true;
    };

    direnv = {
      enable = true;
      nix-direnv.enable = true;
    };

    bash = {
      enable = true;
      initExtra = ''
        if [[ $(${pkgs.procps}/bin/ps -o comm= $PPID) != "fish" && -z "$BASH_EXECUTION_STRING" ]]
        then
          shopt -q login_shell && LOGIN_OPTION='--login' || LOGIN_OPTION=""
          exec ${config.programs.fish.package}/bin/fish $LOGIN_OPTION
        fi
      '';
    };

    gnome-shell = {
      enable = true;
      extensions = [
        { package = pkgs.gnomeExtensions.pop-shell; }
        { package = pkgs.gnomeExtensions.appindicator; }
      ];
    };

    emacs = {
      enable = true;
      package = pkgs.emacs29-pgtk;
      extraConfig = builtins.readFile ./emacs.org;
      extraConfigTangle = true;
      extraPathPackages = with pkgs; [
        nixfmt-rfc-style
        texlive.combined.scheme-full
        wl-clipboard
        nixd
      ];
      extraEmacsPackages = epkgs: with epkgs; [
        htmlize
        corfu-terminal
        nix-mode
        exotica-theme
        chyla-theme
        white-sand-theme
        gruvbox-theme
        aggressive-indent
        corfu
        orderless
        marginalia
        all-the-icons
        all-the-icons-completion
        vertico
        which-key
        org-appear
        org-superstar
        lsp-mode
        flycheck
      ];
    };

    firefox.enable = true;
  };

  services.emacs = {
    enable = true;
    package = config.programs.emacs.finalPackage;
    defaultEditor = true;
    client.enable = true;
  };

  xdg.configFile = {
    "/pop-shell/config.json".text = ''
      {
        "float": [
          {
            "class": "firefox",
            "title": "^(?!.*Mozilla Firefox).*$",
            "disabled": true
          }
        ],
        "skiptaskbarhidden": [],
        "log_on_focus": false
      }
    '';
  };

  dconf.settings =
    with lib.hm.gvariant;
    let
      wallpaper = builtins.toString ./wallpaper.jpg;
    in
      {
        "org/gnome/desktop/background" = {
          picture-uri = wallpaper;
          picture-uri-dark = wallpaper;
          piture-options = "scaled";
        };

        "org/gnome/desktop/peripherals/keyboard" = {
          numberlock-state = true;
        };

        "org/gnome/desktop/screensaver" = rec {
          picture-uri = wallpaper;
          picture-uri-dark = wallpaper;
          picture-options = "scaled";
        };

        "org/gnome/desktop/input-sources" = {
          mru-sources = [
            (lib.hm.gvariant.mkTuple [
              "xkb"
              "us"
            ])
          ];
          sources = [
            (mkTuple [
              "xkb"
              "us+altgr-intl"
            ])
          ];
          xkb-options = [ "terminate:ctrl_alt_bksp" ];
        };

        "org/gnome/desktop/interface" = {
          color-scheme = "prefer-dark";
        };

        "org/gnome/desktop/peripherals/mouse" = {
          natural-scroll = true;
          speed = 0.21052631578947367;
        };

        "org/gnome/mutter" = {
          dynamic-workspaces = true;
          edge-tiling = false;
        };

        "org/gnome/settings-daemon/plugins/color" = {
          night-light-enabled = true;
          night-light-schedule-automatic = true;
          night-light-schedule-to = 8.0;
          night-light-temperature = mkUint32 3170;
        };

        "org/gnome/shell/extensions/pop-shell" = {
          active-hint = false;
          active-hint-border-radius = 1;
          gap-inner = mkUint32 0;
          gap-outer = mkUint32 0;
          tile-by-default = true;
        };
      };

  home.packages = with pkgs; [
    (zoom-us.overrideAttrs (old: {
      postFixup =
        old.postFixup
        + ''
          wrapProgram $out/bin/zoom --unset XDG_SESSION_TYPE
        '';
    }))
    wget
    gnome-tweaks
    gnome-console
    protonup
    nautilus
    discord
    spotify
    git
    godot_4
    emacs-all-the-icons-fonts
  ];
  fonts.fontconfig.enable = true;

  home.stateVersion = "24.05";
}

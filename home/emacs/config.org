#+title: Emacs Configuration
#+property: header-args:emacs-lisp :tangle yes :results output none

* Appearance
** Frame
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (pixel-scroll-precision-mode)

  (setopt frame-resize-pixelwise t
          global-display-line-numbers-mode t
          visible-bell t
          line-spacing 2)

  (add-to-list 'default-frame-alist '(alpha-background . 99))

  (setopt left-margin-width 2)
  (setopt right-margin-width 2)
#+end_src

** Themes
#+begin_src emacs-lisp
  (defvar my-themes '(ef-bio ef-kassio exotica))

  (defun cycle-themes ()
    (interactive)
    (let* ((current-theme (car custom-enabled-themes))
           (next-theme (or (cadr (member current-theme my-themes))
                           (car my-themes))))
      (disable-theme current-theme)
      (load-theme next-theme t)
      (message "%s" next-theme)))

  (load-theme (car my-themes) t)
  (global-set-key (kbd "C-\\") 'cycle-themes)
#+end_src

** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono"))
#+end_src

** Cursor
#+begin_src emacs-lisp
  (setopt cursor-type '(bar . 3))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (require 'telephone-line)
  (setopt telephone-line-primary-right-separator 'telephone-line-tan-left
          telephone-line-secondary-right-separator 'telephone-line-tan-left
          telephone-line-primary-left-separator 'telephone-line-flat
          telephone-line-height 20)
  (telephone-line-mode 1)
#+end_src

** Icons
#+begin_src emacs-lisp
  (require 'all-the-icons)

  (require 'all-the-icons-dired)
  (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)

  (require 'all-the-icons-completion)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
#+end_src

** File Tree
#+begin_src emacs-lisp
  (require 'treemacs)
  (setopt treemacs-user-mode-line-format 'none
          treemacs-position 'right)
  (global-set-key (kbd "C-t") 'treemacs)
#+end_src

* Editing
** Completion
#+begin_src emacs-lisp
  (require 'orderless)
  (setopt completion-styles '(orderless)
          tab-always-indent 'complete
          completion-category-defaults nil
          comletion-captegory-overrides '((file (styles partial-completion)))
          read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          completion-ignore-case t
          read-extended-command-predicate #'command-completion-default-include-p)

  (require 'lsp-mode)
  (setopt lsp-keymap-prefix "C-c l")
  (add-hook 'nix-mode-hook #'lsp-deferred)
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)

  (require 'corfu)
  (setopt corfu-auto t)
  (global-corfu-mode)

  (require 'vertico)
  (setopt vertico-count 15
          vertico-resize nil
          vertico-cycle t)
  (vertico-mode)

  (require 'marginalia)
  (setopt marginalia-align 'right)
  (marginalia-mode)
#+end_src

** Linting
#+begin_src emacs-lisp
  (require 'flycheck)
  (setopt flycheck-emacs-lisp-load-path 'inherit
          debug-on-error t)
  (global-flycheck-mode)

  (defun disable-flycheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  (add-hook 'org-src-mode-hook #'disable-flycheck-in-org-src-block)
#+end_src

** Backups
#+begin_src emacs-lisp
  (setopt backup-by-copying t
          delete-old-versions t
          version-control t
          kept-new-versions 5
          kept-old-versions 2)

  (let ((backup-dir "~/.emacs.d/backups")
        (auto-saves-dir "~/.emacs.d/auto-saves"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir))
#+end_src

** Navigation
#+begin_src emacs-lisp
  (require 'avy)
  (global-set-key (kbd "C-:") 'avy-goto-char-timer)

  (require 'ibuf-ext)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (defun ibuffer--remove-column-titles-after (_format)
    (save-excursion
      (set-buffer "*Ibuffer*")
      (let ((inhibit-read-only t))
        (goto-char 1)
        (search-forward "-\n" nil t)
        (delete-region 1 (point)))
      (let ((window-min-height 1))
        (shrink-window-if-larger-than-buffer))))
  (advice-add 'ibuffer-update-title-and-summary :after #'ibuffer--remove-column-titles-after)

  (setopt browse-url-browser-function #'browse-url-firefox)
#+end_src

** Misc
#+begin_src emacs-lisp
  (electric-pair-mode) 
  (delete-selection-mode t)
  (add-hook 'prog-mode-hook #'hs-minor-mode)

  (require 'aggressive-indent)
  (global-aggressive-indent-mode)

  (require 'which-key)
  (which-key-mode)

  (global-set-key [f12] 'eval-buffer)
#+end_src

* Org Mode
** Apparence
#+begin_src emacs-lisp
  (setopt initial-major-mode 'org-mode
          initial-scratch-message "#+title: scratch buffer\n")

  (custom-set-faces
   '(org-document-title ((t (:height 1.50))))
   '(org-level-1 ((t (:height 1.37))))
   '(org-level-2 ((t (:height 1.25))))
   '(org-level-3 ((t (:height 1.12)))))

  (setopt org-startup-indented t
          org-startup-align-all-tables t
          org-startup-numerated nil
          org-hide-leading-stars t
          org-return-follows-link  t
          org-support-shift-select t
          org-hide-emphasis-markers t
          org-confirm-babel-evaluate nil)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)

  (require 'org-superstar)
  (add-hook 'org-mode-hook #'org-superstar-mode)

  (require 'org-appear)
  (add-hook 'org-mode-hook #'org-appear-mode)

       (setq org-emphasis-alist
       '(("*" bold)
         ("/" italic)
         ("_" underline)
         ("=" (:foreground "red") verbatim) ;;#6d7f87
         ("~" org-code verbatim)
         ("+" (:strike-through t))))
#+end_src

** Editing
*** COMMENT Spell checking
#+begin_src emacs-lisp
  (require 'jinx)
  (add-hook 'text-mode-hook #'jinx-mode)
  (keymap-global-set "M-c" #'jinx-correct)
  (setopt jinx-languages "en")
#+end_src

*** Moving text
#+begin_src emacs-lisp
  (defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-text-down (arg)
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  (interactive "*p")
  (move-text-internal (- arg)))

(provide 'move-text)

(global-set-key [M-up] 'move-text-up)
(global-set-key [M-down] 'move-text-down)
#+end_src

*** Misc
#+begin_src emacs-lisp
  (require 'org-download)
  (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** LaTeX Export
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
                   [NO-DEFAULT-PACKAGES]
                   [PACKAGES]
                   [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (setopt org-latex-listings 't)
  (add-hook 'org-mode-hook
            #'(lambda ()
               (define-key org-mode-map (kbd "$") 'self-insert-command)))

  (require 'org-fragtog)
  (add-hook 'org-mode-hook 'org-fragtog-mode)

  (require 'cdlatex)
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  ;; \alpha{} ` a
  ;; C-c { inserts env template, _ ^ completion inside {}
  ;; fr tab insterts fractions, lr( tab, equa tab
  ;; a': \ddot{a} in math mode
#+end_src

** PDF Annotation
#+begin_src emacs-lisp
  ;; https://github.com/org-noter/org-noter
  ;; https://github.com/fuxialexander/org-pdftools
#+end_src
* Misc
#+begin_src emacs-lisp
  (setopt gc-cons-threshold (* 100 1024 1024))
#+end_src
